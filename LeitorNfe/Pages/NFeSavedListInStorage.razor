@page "/list"
@using LeitorNfe.Core.Models
@using LeitorNfe.Core.Models.DTOs
@using LeitorNfe.Core.Services
@using LeitorNfe.Core.Services.Responses
@using Microsoft.AspNetCore.Mvc
@using Microsoft.AspNetCore.Components
@using LeitorNfe.Components
<h3>NFe In Storage List</h3>
<div class="form-floating mb-3">
    <input @oninput="FilterNFesByEmit" type="text" class="form-control" id="floatingInput" placeholder="Name here">
    <label for="floatingInput">Search NFe By Emit Name</label>
</div>
<div class="form-floating mb-3">
    <input @oninput="FilterNFesByDest" type="text" class="form-control" id="floatingInput" placeholder="Name here">
    <label for="floatingInput">Search NFe By Dest Name</label>
</div>
@if (nFesInStorage != null && nFesInStorage.Any())
{
    <ul>
        @foreach (var nfe in nFesInStorageFiltered)
        {   <ul class="py-3" style="border-bottom: 1px solid gray">
                <button class="btn btn-primary" @onclick="(e => EditNFe(nfe))">Editar</button>

                <li>Diretório: @nfe.Directory</li>
                <li>
                    @if (!string.IsNullOrEmpty(nfe.Comentary))
                    {
                        <li class="fw-bold">
                            Comentário:
                            @nfe.Comentary
                        </li>
                    }
                    else
                    {
                        <li class="fw-bold">
                            Não tem comentário.
                        </li>
                    }
                </li>
                <ul>
                    @if (nfe.NFe != null)
                    {
                        <ul>
                            <li>
                                <ul>
                                    <li>Id: @(nfe.NFe.Id)</li>
                                @if (nfe.NFe.InfNFe != null)    
                                {
                                    @if (nfe.NFe.InfNFe.Ide != null) 
                                    {
                                        <li>cUF: @nfe.NFe.InfNFe.Ide.cUF</li>
                                        <li>cNF: @nfe.NFe.InfNFe.Ide.cNF</li>  
                                    }

                                    @if (nfe.NFe.InfNFe.Emit != null) 
                                    {
                                        <li>Emitente: @nfe.NFe.InfNFe.Emit.xNome</li>
                                    }
                                    else
                                    {
                                        <li>Não tem emitente.</li>
                                    }
                                    
                                    @if (nfe.NFe.InfNFe.Dest != null) 
                                    {
                                        <li>Destinatário: @nfe.NFe.InfNFe.Dest.xNome</li>
                                    }
                                    else 
                                    {
                                        <li>Não tem destinatário.</li>
                                    }

                                    <li>Produtos:
                                        <ul>
                                            @if (nfe.NFe.InfNFe.Det != null) 
                                            {
                                                @foreach (var det in nfe.NFe.InfNFe.Det)
                                                {
                                                    <li>
                                                        <ul>
                                                            <li>cProd: @det.Prod.cProd</li>
                                                            <li>xProd: @det.Prod.xProd</li>
                                                            <li>qCom: @det.Prod.qCom</li>
                                                        </ul>
                                                    </li>
                                                }
                                            }
                                        </ul>
                                    </li> 
                                }
                                </ul>
                            </li>
                        </ul>
                    }
                    else
                    {
                        <p>NFe is null for this item.</p>
                    }
                </ul>
            </ul>
        }
    </ul>
}
else
{
    <p>No NFes in storage.</p>
}

@if(SwitchConfirmationModal)
{
   <Modal>

        <HeaderContent>
            <h5 class="modal-title">Detalhes da NFe</h5>
            <button type="button" class="close" @onclick="CloseModal">
                <span aria-hidden="true">&times;</span>
            </button>
        </HeaderContent>

        <BodyContent>
            <h4>Deseja apagar o NFe @selectedNFeInStorage.Id do diretório @selectedNFeInStorage.Directory ?</h4>
        </BodyContent>

        <FooterContent>
            <button type="button" class="btn btn-danger" @onclick="DeleteNFe">Deletar NFe</button>
            <button type="button" class="btn btn-warning" @onclick="CloseDeleteConfirmationModal">Fechar</button>
        </FooterContent>

    </Modal>  
}
@if (SwitchModalSelectedNFeInStorage)
{   <Modal>

        <HeaderContent>
            <h5 class="modal-title">Detalhes da NFe</h5>
            <button type="button" class="close" @onclick="CloseModal">
                <span aria-hidden="true">&times;</span>
            </button>
        </HeaderContent>

        <BodyContent>
            <InfoNFeEditModal nfe="selectedNFeInStorage"/>
        </BodyContent>

        <FooterContent>
            <button type="button" class="btn btn-primary" @onclick="UpdateNFe">Salvar</button>
            <button type="button" class="btn btn-danger" @onclick="OpenDeleteConfirmationModal">Deletar NFe</button>
            <button type="button" class="btn btn-warning" @onclick="CloseModal">Fechar</button>
        </FooterContent>

    </Modal>
}

@code {
    [Inject] private INFeInStorageService NFeInStorageService { get; set; }
    private List<NFeInStorage> nFesInStorage;
    private NFeInStorage selectedNFeInStorage;
    private EditNFeInStorageForm editNFeInStorageForm;
    
    //modal
    private bool SwitchModalSelectedNFeInStorage = false;
    private bool SwitchConfirmationModal = false;
    
    private List<NFeInStorage> nFesInStorageFiltered;

    protected override async Task OnInitializedAsync()
    {
        var response = await NFeInStorageService.GetNFes();
        nFesInStorage = response?.NFesInStorage;
        nFesInStorage = nFesInStorage.ToList();
        nFesInStorageFiltered = nFesInStorage;
    }

    public async Task UpdateNFe()
    {
        try {
            EditNFeInStorageForm editNFeInStorageForm = new(){
                NFeInStorage = selectedNFeInStorage
            };
            await NFeInStorageService.UpdateNFe(editNFeInStorageForm);
            CloseModal();
        } catch(Exception ex) 
        {
            Console.WriteLine("Err:" + ex.Message);
        }
    }

    public async Task DeleteNFe() 
    {
        try {
            await NFeInStorageService.DeleteNFe(selectedNFeInStorage);
            nFesInStorageFiltered = nFesInStorage.Where(e => e.Id != selectedNFeInStorage.Id).ToList();
            CloseDeleteConfirmationModal();
            StateHasChanged();
        } catch(Exception ex) 
        {
            Console.WriteLine("Err:" + ex.Message);
        }

    }

    public void EditNFe(NFeInStorage nfe)
    {
        selectedNFeInStorage = nfe;
        SwitchModalSelectedNFeInStorage = true;
    }

    public void OpenDeleteConfirmationModal()
    {
        SwitchModalSelectedNFeInStorage = false;
        SwitchConfirmationModal = true;
    }

    public void CloseDeleteConfirmationModal()
    {

        SwitchConfirmationModal = false;
    }

    public void CloseModal()
    {
        selectedNFeInStorage = null;
        SwitchModalSelectedNFeInStorage = false;
    }


    public void FilterNFesByEmit(ChangeEventArgs e) 
    {
        if(string.IsNullOrWhiteSpace(e.Value?.ToString()))
        {
            nFesInStorageFiltered = nFesInStorage.ToList(); // Revert to the original list
        }
        else
        {
            nFesInStorageFiltered = nFesInStorage
                .Where(x => x.NFe.InfNFe?.Emit?.xNome.IndexOf(e.Value.ToString(), StringComparison.OrdinalIgnoreCase) >= 0)
                .ToList();
        }
    }

    public void FilterNFesByDest(ChangeEventArgs e) 
    {
        if(string.IsNullOrWhiteSpace(e.Value?.ToString()))
        {
            nFesInStorageFiltered = nFesInStorage.ToList(); // Revert to the original list
        }
        else
        {
            nFesInStorageFiltered = nFesInStorage
                .Where(x => x.NFe.InfNFe?.Dest?.xNome.IndexOf(e.Value.ToString(), StringComparison.OrdinalIgnoreCase) >= 0)
                .ToList();
        }
    }

}
