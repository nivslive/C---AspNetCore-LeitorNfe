@using LeitorNfe.Core.Services
@using LeitorNfe.Core.Models
@using LeitorNfe.Core.Models.DTOs
<li>Diretório: @nfe.Directory</li>
<li>

    <p>
    <label>
        <InputFile OnChange="@OverwriteSavedNFe"/>
        </label>
    </p>

    @if (!string.IsNullOrEmpty(nfe.Comentary))
    {
        <li class="fw-bold">
            Comentário:
             <input @bind="nfe.Comentary"> 
        </li>
    }
    else
    {
        <li class="fw-bold">
            Não tem comentário. Comente agora:
            <input @bind="nfe.Comentary"> 
        </li>
    }

    <ul>
        @if (nfe.NFe != null)
        {
            <ul>
                <li>
                    <ul>
                        <li>Id: @(nfe.NFe.Id)</li>
                    @if (nfe.NFe.InfNFe != null)    
                    {
                        @if (nfe.NFe.InfNFe.Ide != null) 
                        {
                            <li>cUF: @nfe.NFe.InfNFe.Ide.cUF</li>
                            <li>cNF: @nfe.NFe.InfNFe.Ide.cNF</li>  
                        }

                        @if (nfe.NFe.InfNFe.Emit != null) 
                        {
                            <li>Emitente: @nfe.NFe.InfNFe.Emit.xNome</li>
                        }
                        else
                        {
                            <li>Não tem emitente.</li>
                        }
                        
                        @if (nfe.NFe.InfNFe.Dest != null) 
                        {
                            <li>Destinatário: @nfe.NFe.InfNFe.Dest.xNome</li>
                        }
                        else 
                        {
                            <li>Não tem destinatário.</li>
                        }

                        <li>Produtos:
                            <ul>
                                @if (nfe.NFe.InfNFe.Det != null) 
                                {
                                    @foreach (var det in nfe.NFe.InfNFe.Det)
                                    {
                                        <li>
                                            <ul>
                                                <li>cProd: @det.Prod.cProd</li>
                                                <li>xProd: <input @bind="det.Prod.xProd"> </li>
                                                <li>qCom: <input @bind="det.Prod.qCom"></li>
                                            </ul>
                                        </li>
                                    }
                                }
                            </ul>
                        </li> 
                    }
                    </ul>
                </li>
            </ul>
        }
        else
        {
            <p>NFe is null for this item.</p>
        }
    </ul>
</li>


@code {
    [Inject] IXmlService XmlService {get;set;}
    [Inject] INFeInStorageService NFeInStorageService {get; set;}
    [Parameter] public NFeInStorage? nfe {get;set;}
    public EditNFeInStorageForm EditNFeInStorageForm;
    
    private LeitorNfe.Utils.XMLUtils XMLUtils;


    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 15;
    private int maxAllowedFiles = 1;
    private bool isLoading;

    private async void OverwriteSavedNFe()
    {
        try
        {
            foreach (var file in loadedFiles)
            {
                if(!string.IsNullOrEmpty(nfe.Directory)) {
                    if (File.Exists(nfe.Directory))
                    {
                        File.Delete(nfe.Directory);
                    }
                }

                var filePath = nfe.Directory ?? XMLUtils.GetFilePath();        

                // Cria o diretório se não existir
                Directory.CreateDirectory(Path.GetDirectoryName(filePath));

                using var stream = file.OpenReadStream();
                using var reader = new StreamReader(stream);
                var xmlString = await reader.ReadToEndAsync();


                await File.WriteAllTextAsync(filePath, xmlString);
                
                var NFeObject = XmlService.ReadXMLAndConvertToObject(xmlString);

                EditNFeInStorageForm editNFeInStorageForm = new(){
                    NFeInStorage = new NFeInStorage {
                        NFe = NFeObject.First(),
                        Directory = filePath,
                        Comentary = nfe.Comentary
                    }
                };

                await NFeInStorageService.UpdateNFe(editNFeInStorageForm);
            }

            Console.WriteLine("NFe saved successfully!");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving NFe: {ex.Message}");
        }
    }

}